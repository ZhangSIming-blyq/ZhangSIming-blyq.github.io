<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on bailiyingqi&#39;s blog</title>
    <link>https://zhangsiming-blyq.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on bailiyingqi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 01 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhangsiming-blyq.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【算法系列】生成窗口最大值数组</title>
      <link>https://zhangsiming-blyq.github.io/post/algorithm/6/</link>
      <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhangsiming-blyq.github.io/post/algorithm/6/</guid>
      <description>
        
          
            题目要求 有一个整形数组arr和一个大小为w的窗口从数组最左边滑到最右边，窗口每次向右边滑一个位置。例如，数组为[4,3,5,4,3,3,6,7], 窗口大小为3时:
如果数组长度为n，窗口大小为w，则一共产生 n-w+1 个窗口最大值。请实现一个函数：
输入：整形数组arr，窗口大小为w 输出：一个长度为 n-w+1 的数组res，res[i]表示每一种窗口状态下的最大值，要求时间复杂度O(N*w) 解题思路 整体逻辑：
创建一个双端数组，我们需要根据不同情况从两端分别push和pop 核心就是循环这个arr，把最大的值在arr中的下标放到双端数组的最左端(对应下文程序中&amp;quot;for !bq.Empty() &amp;amp;&amp;amp; arr[i] &amp;gt; arr[bq.Back().(int)] {}&amp;quot;的处理) 当窗口走过对应数值区域的时候，把相应的数据进行过期(对应下文程序中&amp;quot;if bq.Front().(int) == i-w {}&amp;quot;) 注意，因为要输出长度为 n-w+1, 所以循环当&amp;quot;i &amp;gt;= w -1&amp;quot;的时候，才开始输出结果到res中 golang实现 1package main 2 3func Getmaxwindow(arr []int, w int) (res []int) { 4	res = []int{} 5	// 1. create a bidirectional queue to store the result 6	bq := newCustomQueue() 7	// 2. for i &amp;lt; length(arr) 8	for i := 0; i &amp;lt; len(arr); i++ { 9	// 3.
          
          
        
      </description>
    </item>
    
    <item>
      <title>【算法系列】用一个栈实现另一个栈的排序</title>
      <link>https://zhangsiming-blyq.github.io/post/algorithm/5/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhangsiming-blyq.github.io/post/algorithm/5/</guid>
      <description>
        
          
            题目要求 一个栈中元素的类型为整型，现在想将该栈从顶到底按从小到大的顺序排序，只允许申请一个栈。除此之外，可以申请新的变量，但不能申请额外的数据结构。如何完成排序？
解题思路 申请一个新的help栈，不断从原有栈中获取数据, 去跟新的help栈的栈顶数据相比; 如果符合排序要求，就push到help栈中 如果不符合排序要求，就从help栈中pop出栈顶数据，push到原栈中，直至符合排序要求 最终原栈被清空，help栈是全部排好序的栈，重新一股脑写回来即完成栈排序 golang实现 1package main 2 3// SortStark stark top --&amp;gt; stark bottom(from small to big) 4func SortStark(stk *Stack) { 5	helpStack := NewStack() 6	// 1. while go through target stack until stack is empty 7	for stk.Len() &amp;gt; 0 { 8	cur := stk.Pop() 9	// 2. if cur &amp;lt; peek, push helpStack.pop() to target stack until cur &amp;gt; peek or helpStack is empty 10	for (helpStack.
          
          
        
      </description>
    </item>
    
    <item>
      <title>【算法系列】猫狗队列</title>
      <link>https://zhangsiming-blyq.github.io/post/algorithm/4/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhangsiming-blyq.github.io/post/algorithm/4/</guid>
      <description>
        
          
            题目要求 狗和猫都实现了Pet接口，可以用getPetType()查看对应的动物类型; NewDog()、NewCat()可以分别新建狗猫对象。
1type Pet interface { 2	getPetType() string 3} 4 5type fatherPet struct { 6	Type string 7} 8 9func (fp *fatherPet) getPetType() string { 10	return fp.Type 11} 12 13type Dog struct { 14	fatherPet 15} 16 17func NewDog() *Dog { 18	fmt.Println(&amp;#34;new dog&amp;#34;) 19	return &amp;amp;Dog{fatherPet{Type: &amp;#34;dog&amp;#34;}} 20} 21 22func (dog *Dog) getPetType() string { 23	return dog.fatherPet.Type 24} 25 26type Cat struct { 27	fatherPet 28} 29 30func NewCat() *Cat { 31	fmt.
          
          
        
      </description>
    </item>
    
    <item>
      <title>【算法系列】如何仅用递归函数和栈操作逆序一个栈</title>
      <link>https://zhangsiming-blyq.github.io/post/algorithm/3/</link>
      <pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhangsiming-blyq.github.io/post/algorithm/3/</guid>
      <description>
        
          
            题目要求 一个栈依次压入1、2、3、4、5，那么从栈顶到栈底分别为5、4、3、2、1。将这个栈转置后，从栈顶到栈底为1、2、3、4、5，也就是实现栈元素的逆序，但是只能用递归函数来实现，不能用其他数据结构。
解题思路 一个函数实现返回栈内数据，用于返回栈底元素，当栈空的时候停止 另一个函数接受栈底元素并将每一个的数据重新压入栈中，即可实现逆序 golang实现 1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func getAndRemoveLastElement(stack *Stack) int { 6	result := stack.Pop() 7	if stack.Len() == 0 { 8	return result.(int) 9	} else { 10	last := getAndRemoveLastElement(stack) 11	stack.Push(result) 12	return last 13	} 14} 15 16func reverse(stack *Stack) { 17	if stack.Len() == 0 { 18	return 19	} else { 20	garFuncReturn := getAndRemoveLastElement(stack) 21	reverse(stack) 22	stack.
          
          
        
      </description>
    </item>
    
    <item>
      <title>【算法系列】由两个栈组成的队列</title>
      <link>https://zhangsiming-blyq.github.io/post/algorithm/2/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhangsiming-blyq.github.io/post/algorithm/2/</guid>
      <description>
        
          
            题目要求 编写一个类，用两个栈实现队列，支持队列的基本操作：add、poll、peek
解题思路 栈的特点是后进先出、队列的特点是先进先出 一个栈作为压入栈，另一个栈作为弹出栈，只要把压入栈的数据再压入弹出栈顺序就恢复回来了 golang实现 需要注意的是，因为只能保证每次从stackPush到stackPop的数据是连贯的, 所以stackPush在向stackPop压数据的时候必须一次性将全部数据压入, 并且只有stackPop为空时，才进行一次性压入操作。
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5type TwoStackQueue struct { 6	stackPush *Stack 7	stackPop *Stack 8} 9 10func NewTwoStackQueue() *TwoStackQueue { 11	return &amp;amp;TwoStackQueue{ 12	stackPush: NewStack(), 13	stackPop: NewStack(), 14	} 15} 16 17func (tsq *TwoStackQueue) add(data interface{}) { 18	tsq.stackPush.Push(data) 19} 20 21func (tsq *TwoStackQueue) poll() interface{} { 22	if tsq.stackPop.Len() == 0 &amp;amp;&amp;amp; tsq.stackPush.Len() == 0 { 23	fmt.
          
          
        
      </description>
    </item>
    
    <item>
      <title>【算法系列】设计一个有getMin功能的栈</title>
      <link>https://zhangsiming-blyq.github.io/post/algorithm/1/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhangsiming-blyq.github.io/post/algorithm/1/</guid>
      <description>
        
          
            题目要求 pop、push、getMin操作的时间复杂度都是O(1) 设计的栈类型可以使用现成的栈结构 解题思路 使用两个栈，starkData和stackMin 每次压入starkData时候同时比较和stackMin顶部数据大小，小于stackMin顶部数据就将新的最小值压入栈 golang实现 golang内置数据结构不包括栈，定义一个栈:
支持NewStack()创建 支持Push(), Pop(), Peek(), Len(), Push支持任意类型(取值出来断言) 1package main 2 3import &amp;#34;sync&amp;#34; 4 5type ( 6	Stack struct { 7	top *node 8	length int 9	lock *sync.RWMutex 10	} 11	node struct { 12	value interface{} 13	prev *node 14	} 15) 16 17// NewStack Create a new stack 18func NewStack() *Stack { 19	return &amp;amp;Stack{nil, 0, &amp;amp;sync.RWMutex{}} 20} 21 22// Len Return the number of items in the stack 23func (s *Stack) Len() int { 24	return s.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
